// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "mongodb"
   url      = env("DATABASE_URL")
}

enum Gender {
   Male
   Female
   Other
}

model User {
   id        String     @id @default(auto()) @map("_id") @db.ObjectId
   name      String
   email     String     @unique
   password  String
   Employee  Employee?
   Recruiter Recruiter?
   Profile   Profile?
}

model Profile {
   id             String   @id @default(auto()) @map("_id") @db.ObjectId
   dateOfBirth    DateTime
   mobileNumber   String
   address        String
   gender         Gender
   profilePicture String
   bio            String
   User           User     @relation(fields: [userId], references: [id])
   userId         String   @unique @db.ObjectId
}

model Employee {
   id           String   @id @default(auto()) @map("_id") @db.ObjectId
   workLocation String
   resume       String
   keySkills    String[]
   empRole      String
   education    String

   // Relationships (Optional, based on your needs)
   user         User          @relation(fields: [userId], references: [id])
   applications Application[]
   userId       String        @unique @db.ObjectId
}

model Job {
   id          String @id @default(auto()) @map("_id") @db.ObjectId
   title       String
   role        String
   industry    String
   location    String
   salary      Float
   experience  String
   education   String
   empType     String
   description String

   // Relationships (Optional, based on your needs)
   applications Application[]
   recruiter    Recruiter     @relation(fields: [recId], references: [id])
   recId        String        @db.ObjectId
}

model Recruiter {
   id          String @id @default(auto()) @map("_id") @db.ObjectId
   user        User   @relation(fields: [userId], references: [id])
   companyName String
   location    String
   industry    String

   //Relationships (Optional, based on your needs)
   jobs         Job[]
   applications Application[]
   userId       String        @unique @db.ObjectId
}

model Application {
   id     String  @id @default(auto()) @map("_id") @db.ObjectId
   jobId  String  @db.ObjectId
   empId  String  @db.ObjectId
   recId  String  @db.ObjectId
   status Boolean

   // Relationships (Optional, based on your needs)
   job       Job       @relation(fields: [jobId], references: [id])
   employee  Employee  @relation(fields: [empId], references: [id])
   recruiter Recruiter @relation(fields: [recId], references: [id])
}

model Admin {
   id        String @id @default(auto()) @map("_id") @db.ObjectId
   aName     String @unique
   aEmail    String @unique
   aPassword String
}
